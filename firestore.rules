/**
 * @fileoverview Firestore Security Rules for Animal Rescue Connect.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for animal condition reports,
 * where users can only create, read, update, and delete their own reports.
 * User profiles are also secured under the /users/{userId} path, allowing
 * users to manage their own profile data. Other data like NGOs and Hospitals
 * are generally open for reading but restricted for modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /ngos/{ngoId}: Stores NGO information.
 * - /hospitals/{hospitalId}: Stores hospital information.
 * - /animal_condition_reports/{reportId}: Stores animal condition reports.  Each report has a `userId` field indicating ownership.
 * - /hospitals/{hospitalId}/treatment_records/{treatmentId}: Stores treatment records for animals at hospitals.
 *
 * Key Security Decisions:
 * - Users can only manage their own user profiles.
 * - Animal condition reports are owned by the user who created them.
 * - Listing all users is disallowed.
 * - NGO and Hospital data is readable by everyone, but creation/modification is not allowed in this prototype.
 *
 * Denormalization for Authorization:
 * - AnimalConditionReport documents contain a `userId` field to easily check ownership.
 *   This avoids needing to perform additional reads to verify ownership.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} collection, while
 *   publicly accessible data like animal condition reports are stored in
 *   separate, top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // No listing of users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id; // Enforce immutability of user ID on update
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to NGO data.
     * @path /ngos/{ngoId}
     * @allow (get) Any user can read NGO data.
     * @deny (create) No one can create NGO data through client-side rules.
     * @deny (update) No one can update NGO data through client-side rules.
     * @deny (delete) No one can delete NGO data through client-side rules.
     * @principle Allows public read access but restricts write access.
     */
    match /ngos/{ngoId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to Hospital data.
     * @path /hospitals/{hospitalId}
     * @allow (get) Any user can read hospital data.
     * @deny (create) No one can create hospital data through client-side rules.
     * @deny (update) No one can update hospital data through client-side rules.
     * @deny (delete) No one can delete hospital data through client-side rules.
     * @principle Allows public read access but restricts write access.
     */
    match /hospitals/{hospitalId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to animal condition reports.
     * @path /animal_condition_reports/{reportId}
     * @allow (create) User with UID 'user123' can create a report with userId 'user123'.
     * @deny (create) User with UID 'user456' cannot create a report with userId 'user123'.
     * @allow (get) Any user can read any animal condition report.
     * @allow (update) User with UID 'user123' can update a report they own.
     * @deny (update) User with UID 'user456' cannot update a report owned by 'user123'.
     * @allow (delete) User with UID 'user123' can delete a report they own.
     * @deny (delete) User with UID 'user456' cannot delete a report owned by 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /animal_condition_reports/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource != null && isOwner(resource.data.userId);
      allow delete: if request.auth != null && resource != null && isOwner(resource.data.userId);
    }

    /**
     * @description Controls access to treatment records under a specific hospital.
     * @path /hospitals/{hospitalId}/treatment_records/{treatmentId}
     * @allow (get) Any user can read a treatment record.
     * @deny (create) No one can create treatment records through client-side rules.
     * @deny (update) No one can update treatment records through client-side rules.
     * @deny (delete) No one can delete treatment records through client-side rules.
     * @principle Allows public read access but restricts write access.  Write access should be handled via the Firebase Admin SDK.
     */
    match /hospitals/{hospitalId}/treatment_records/{treatmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}