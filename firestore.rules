/**
 * @fileoverview Firestore Security Rules for Animal Rescue Connect.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and utilizes
 * path-based authorization wherever possible. Public read access is not granted
 * to any collections by default.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles.
 * - `/ngos/{ngoId}`: Stores NGO profiles.
 * - `/hospitals/{hospitalId}`: Stores hospital profiles.
 * - `/users/{userId}/animal_condition_reports/{reportId}`: Stores animal condition reports submitted by users.
 * - `/hospitals/{hospitalId}/treatment_records/{treatmentId}`: Stores treatment records for animals at hospitals.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document.
 * - Users can only read/write animal condition reports they created.
 * - NGOs and Hospitals are only accessible to authenticated users.
 * - Listing of users is not allowed.
 *
 * Denormalization for Authorization:
 * - User documents include a `userType` field to avoid extra reads during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID ('user456').
     * @allow (get) User with ID 'user123' can read their profile.
     * @deny (get) User with ID 'user123' cannot read another user's profile ('user456').
     * @allow (update) User with ID 'user123' can update their own profile.
     * @deny (update) User with ID 'user123' cannot update another user's profile ('user456').
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (delete) User with ID 'user123' cannot delete another user's profile ('user456').
     * @principle Enforces user-ownership for profile data and validates ID consistency.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is disallowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to NGO profiles.
     * @path /ngos/{ngoId}
     * @allow (create) Authenticated user can create NGO.
     * @deny (create) Unauthenticated user cannot create NGO.
     * @allow (get) Any authenticated user can read any NGO profile.
     * @deny (get) Unauthenticated user cannot read NGO profiles.
     * @allow (update) Authenticated user can update NGO.
     * @deny (update) Unauthenticated user cannot update NGO.
     * @allow (delete) Authenticated user can delete NGO.
     * @deny (delete) Unauthenticated user cannot delete NGO.
     * @principle Authenticated users can manage NGOs.
     */
    match /ngos/{ngoId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Hospital profiles.
     * @path /hospitals/{hospitalId}
     * @allow (create) Authenticated user can create Hospital.
     * @deny (create) Unauthenticated user cannot create Hospital.
     * @allow (get) Any authenticated user can read any Hospital profile.
     * @deny (get) Unauthenticated user cannot read Hospital profiles.
     * @allow (update) Authenticated user can update Hospital.
     * @deny (update) Unauthenticated user cannot update Hospital.
     * @allow (delete) Authenticated user can delete Hospital.
     * @deny (delete) Unauthenticated user cannot delete Hospital.
     * @principle Authenticated users can manage Hospitals.
     */
    match /hospitals/{hospitalId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to animal condition reports submitted by users.
     * @path /users/{userId}/animal_condition_reports/{reportId}
     * @allow (create) User with ID 'user123' can create a report under their profile.
     * @deny (create) User with ID 'user123' cannot create a report under another user's profile ('user456').
     * @allow (get) User with ID 'user123' can read their own report.
     * @deny (get) User with ID 'user123' cannot read another user's report.
     * @allow (update) User with ID 'user123' can update their own report.
     * @deny (update) User with ID 'user123' cannot update another user's report.
     * @allow (delete) User with ID 'user123' can delete their own report.
     * @deny (delete) User with ID 'user123' cannot delete another user's report.
     * @principle Enforces user-ownership for animal condition reports using path-based authorization.
     */
    match /users/{userId}/animal_condition_reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to treatment records for animals at hospitals.
     * @path /hospitals/{hospitalId}/treatment_records/{treatmentId}
     * @allow (create) Authenticated user can create TreatmentRecord for a hospital.
     * @deny (create) Unauthenticated user cannot create TreatmentRecord.
     * @allow (get) Authenticated user can get TreatmentRecord for a hospital.
     * @deny (get) Unauthenticated user cannot get TreatmentRecord.
     * @allow (update) Authenticated user can update TreatmentRecord for a hospital.
     * @deny (update) Unauthenticated user cannot update TreatmentRecord.
     * @allow (delete) Authenticated user can delete TreatmentRecord for a hospital.
     * @deny (delete) Unauthenticated user cannot delete TreatmentRecord.
     * @principle Authenticated users can manage TreatmentRecords.
     */
    match /hospitals/{hospitalId}/treatment_records/{treatmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.hospitalId == hospitalId;
      allow update: if isSignedIn() && request.resource.data.hospitalId == hospitalId && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}